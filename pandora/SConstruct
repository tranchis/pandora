
import os

release = ARGUMENTS.get('release', 1)
mareNostrum = ARGUMENTS.get('mn', 0)
extremeDebug = ARGUMENTS.get('edebug', 0)
useMpi = ARGUMENTS.get('mpi', 1)

if int(useMpi) == 1:
	env = Environment(ENV=os.environ, CXX='mpicxx')
else:
	env = Environment(ENV=os.environ, CXX='g++')

env.VariantDir('build', '.')

libs = Split('dl pthread gdal hdf5 z tinyxml grass_gis boost_filesystem boost_system gomp')
#if int(useMpi) == 1:
#	libs += ['mpich']

if int(release) == 0:
	env['CCFLAGS'] = Split('-g -Wall -DTIXML_USE_STL -fopenmp -DPANDORADEBUG')
	if int(extremeDebug)==1:
		env['CCFLAGS'] += ['-DPANDORAEDEBUG']
	libraryName = 'pandorad'
	pythonLibraryName = 'pyPandorad'
else:
	env['CCFLAGS'] = Split('-O3 -Wall -DTIXML_USE_STL -fopenmp')
	libraryName = 'pandora'
	pythonLibraryName = 'pyPandora'

if int(useMpi)==1:
	env['CCFLAGS'] += ['-DPANDORAMPI']

coreFiles = Split('World.cxx StaticRaster.cxx Raster.cxx Agent.cxx Statistics.cxx SimulationRecord.cxx AgentRecord.cxx Serializer.cxx Simulation.cxx Config.cxx MpiFactory.cxx IncrementalRaster.cxx RasterLoader.cxx Action.cxx LoggerBase.cxx GeneralState.cxx ShpLoader.cxx')

analysisFiles = Split('analysis/Analysis.cxx analysis/AgentMean.cxx analysis/AgentSum.cxx analysis/AgentNum.cxx analysis/Results.cxx analysis/RasterSum.cxx analysis/RasterMean.cxx analysis/AgentHDFtoSHP.cxx analysis/AgentHistogram.cxx analysis/AgentFinalResults.cxx analysis/AgentStdDev.cxx')

srcFiles = coreFiles + analysisFiles

srcBaseFiles = [] 
for src in srcFiles:
	srcBaseFiles.append('build/'+src)

if int(mareNostrum)==1:
	includeDirs = Split('. analysis/ /apps/HDF5/1.8.10-mpi/OPENMPI/include')
	includeDirs += ['/apps/BOOST/1_52_0/include/']
	includeDirs += ['/apps/TINYXML/2.6.2/include']
	includeDirs += ['/apps/GDAL/1.9.2/include']
	includeDirs += ['/apps/GRASS/6.4.3RC2/grass-6.4.3RC2/include/']

	libDirs = Split('/apps/HDF5/1.8.10-mpi/OPENMPI/lib /apps/GDAL/1.9.2/lib /apps/TINYXML/2.6.2/lib')
	libDirs += ['/apps/BOOST/1_52_0/lib/']
	libDirs += ['/apps/GRASS/6.4.3RC2/grass-6.4.3RC2/lib/']
else:
	includeDirs = Split('. /usr/local/hdf5/include /usr/lib/grass64/include /analysis/ /usr/local/include /usr/include/gdal/')
	libDirs = Split('. /usr/local/hdf5/lib/ /usr/lib/grass64/lib/ /usr/lib /usr/local/lib')
	libs += ['mpl']

env.SharedLibrary(libraryName, srcBaseFiles, CPPPATH=includeDirs, LIBS=libs, LIBPATH=libDirs)

if int(mareNostrum)==0:
	if int(useMpi) == 1:
		envPython = Environment(ENV=os.environ, CXX='mpicxx')
	else:
		envPython = Environment(ENV=os.environ, CXX='g++')

	envPython['LINKFLAGS'] = Split('-Wl,--export-dynamic,-no-undefined')
	envPython.VariantDir('build_py', '.')

	if int(release) == 0:
		envPython['CCFLAGS'] = Split('-g -Wall -DTIXML_USE_STL -DPANDORADEBUG')	
		if int(extremeDebug)==1:
			envPython['CCFLAGS'] += ['-DPANDORAEDEBUG']
	else:
		envPython['CCFLAGS'] = Split('-O3 -Wall -DTIXML_USE_STL')
	
	if int(useMpi)==1:
		envPython['CCFLAGS'] += ['-DPANDORAMPI']
	
	srcPyFiles = [] 
	for src in srcFiles:
		srcPyFiles.append('build_py/'+src)

	srcPyFiles.append('build_py/pyBindings.cxx')

	if int(useMpi) == 1:
		srcPyFiles.append('build_py/MpiStubCode.cxx')

	libsPython = libs
	libsPython += ['boost_python']
	libsPython += ['python2.7']
	includeDirsPython = includeDirs
	includeDirsPython += ['/usr/include/python2.7/']

	envPython.SharedLibrary(pythonLibraryName, srcPyFiles, CPPPATH=includeDirsPython, LIBS=libsPython, LIBPATH=libDirs )

